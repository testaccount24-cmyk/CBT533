         Documentation for the VTT2TAPE and VTT2DISK Programs

        (A part of VTTS - "Virtual Tape Transportation System")

Sam Golob - copyright (c) 2001-2005 by Sam Golob

    The VTTS (Virtual Tape Transportation System) is copyrighted
    and owned by Sam Golob.  But modules VTT2TAPE and VTT2DISK in
    their "free versions" will be freely usable without charge,
    even though these programs are the property of Sam Golob,
    either in source code, object deck, or load module form, or
    in any format or encoded in any way.

    What are the "free versions"?  These are the versions of VTT2TAPE
    and VTT2DISK that are distributed with the CBT Tape collection.

    The VTT2DISK and VTT2TAPE programs allow an MVS system to move
    entire tapes to disk, and create tapes from these disk files again.

    The VTT2CNVU program is an MVS program to convert RECFM=VB AWS
    files into FB-80 format, so they can be read by VTT2TAPE to cut
    a real tape.

    The VTT2FK2T program is like VTT2TAPE, but it takes a FAKETAPE
    virtual tape file (from FLEX-ES), which had been folded into FB-80
    format on any MVS system, and writes a real tape from that data.
    FTP will fold an external file of this type, like a FAKETAPE file,
    into an FB-80 format MVS file, if you tell it to, or if you
    pre-allocate the target file as FB-80 on the MVS system.

Some of the need for the programs:

            AWS Tape format is produced by P/390 and Hercules systems
            to create disk files, which an MVS system reads and writes,
            as if they were actual tapes.   Therefore, an MVS system
            without a tape drive, if it is so equipped to produce
            "virtual tapes" in AWS Tape format, can write to tapes, and
            read from tapes.  These tapes are really disk files.
            Another name for these disk files is "virtual tapes",
            because the MVS system looking at these files "thinks"
            that they really are tapes.

            There have existed programs which can read REAL tapes and
            create virtual tapes from them.  One example is Brandon
            Hill's AWSUTIL program.  These virtual tapes can be loaded
            on a Hercules system somewhere and be read as a tape.

            Our program VTT2DISK performs this function also, by
            reading a REAL tape and producing an FB-80 "folded
            AWS-format tape" as an MVS disk file.  In doing the reading,
            the VTT2DISK program produces a lot of stats about the tape.
            The advantage of the VTT2DISK program is that it can be run
            on a "big iron" mainframe-based MVS system that cannot
            normally produce AWS-format virtual tapes.  VTT2DISK
            will produce AWS-format "tape" disk files on "real MVS".

            The main problem is, to also go the other way.

            Suppose you have an MVS system that can't read a tape in
            AWS format.  Most large MVS systems which are not P/390 or
            Hercules machines, but they are real MVS machines--big
            iron--are in this position.  So for them, how do you
            convert an AWS "virtual tape" disk file to some format
            that the MVS system can convert into a REAL tape?  That
            is the purpose of the VTT2TAPE program.

            As easy as the concept seems:  Take an AWS format tape, and
            make it readable to MVS--in practice, there is a large
            complication, which I hope to explain.

            A large part of describing this problem is the understanding
            of the rather simple AWS tape format.  Once you understand
            AWS tape format (as it exists on an OS/2 system or a PC),
            the difficulty of reading this file on a "pure MVS system"
            will become clear.  I hope that the rest of my explanation
            will serve to clear up the difficulty.

AWS Tape File on OS/2 or a PC is a Continuous stream of data:

            The essence of the AWS tape format is that on a PC, or on
            an OS/2 system, the "tape file" appears logically, as one
            continuous stream of data.  For example, a CBT Master Tape,
            (the SL version that I use), at the time of this writing,
            is about 331 million bytes long.  On OS/2 or on the PC, this
            looks like one continuous stream of data that is 331 million
            bytes long.  For all practical purposes there is no blocking
            of the data at all.

            That presents a problem on MVS, where just about all data
            has to be blocked.   On MVS, you must "fold the data over"
            into blocks and records.  For my convenience, I have
            chosen to fold the AWS tape data as Fixed Blocked LRECL=80
            card image files.  Such files are conveniently handled on
            MVS systems and in transmission processes, and you can
            browse (and even edit) all of the "tape data" on TSO.
            (You can even read the FB-80 "tape data" into an internal
            reader.)

            Then you must un-fold the data, logically.

            My MVS program VTT2TAPE reads in the AWS tape data that was
            uploaded to MVS from a PC or OS/2 system, and folded into
            FB-80 card images, and it writes out an actual tape, using
            EXCP to write the blocks.

            As with the VTT2DISK program, the VTT2TAPE program produces
            many stats, as it writes the new tape from the disk version
            of the "tape" in FB-80 AWS format.

AWS Tape Format:

            Although a "tape" in the AWS Tape format appears
            continuous, tape files are delimited by means of 6-byte
            headers.  Each tape block is preceded by a header, and
            followed by a header.  Also, end-of-file is indicated by
            a different header.  The end-of-file header roughly
            corresponds to a tape mark, preceded by the "write out"
            of the last data block.  Every AWS tape file starts out
            with a header.

            Three two-byte segments comprise the header.

            The first two-byte segment contains the number of bytes in
            the block to follow (but this is in "PC format" with the
            two bytes reversed).

            This value will be zero for the header that comes after
            the last block of a file.

            The second two-byte segment contains the number of bytes in
            the block of data which immediately preceded this header.
            That value may be zero, and is zero if the header is the
            first header for a file.  Again, the two-byte value cannot
            be read as a halfword quantity, unless the bytes are
            reversed.  This is the backwards PC Intel format for
            halfwords (which I term BIF, or Backwards Intel Format).

            The third two-byte piece of the header might be more
            complicated in the future, but right now it is very
            simple:   X'A000' denotes a block in the beginning or
            in the middle of a file.  X'4000' denotes an end-of-file.

            A block of data might be broken up into CHUNKS.  Each
            chunk lies between two headers.  The flag byte in the
            header preceding the beginning chunk of a block is
            X'80'.  The flag byte for the middle chunk of a block is
            X'00'.  The flag byte for the end chunk of a block is
            X'20'.  If a chunk is an entire block, then its flag
            byte of the header preceding it, is X'A0' (combined
            X'80' and X'20') as we have stated before.

            A final tapemark for a tape, therefore, is:
                 X'000000004000'

            That's all folks.  It's all very simple.  You just have
            to think about it.

Backwards Intel Halfword Format:

            Halfwords in the AWS headers are in "Backwards Intel
            Format" or "PC Format".  For example, the quantity
            32720, which is a normal block size for Fixed 80-byte
            LRECL files, is usually represented in a halfword as
            X'7FD0'.  But in Backwards Intel Format, this is
            represented as X'D07F'.  (Got it?)

The Hard Part:

            The hard part of writing VTT2TAPE was:

            1 - Tracking through the 80-byte records and finding
                all the headers.

            2 - Correctly moving the right number of data bytes,
                and the right data blocks that are in between the
                headers, to the correct place in the output buffer
                that is in the program.

            3 - Once each data block is moved entirely, and
                correctly, into the output buffer (in the program),
                putting them out to tape with EXCP is a snap.
                The number of bytes to move is taken from the
                "next byte count" field in the header that
                precedes the current block.  This value is checked
                against the accumulated total of data bytes moved.

            4 - The X'4000'-third-byte headers cause the write of a
                tape mark.

   The data unfolding from FB-80 file to tape buffer is now done by
   a completely separate sub-program called UNFOLDEM.  The data
   folding from tape buffer to FB-80 file is now done by a completely
   separate sub-program called FOLDEM.  Each of these sub-programs
   communicates with its caller by means of a control block.  The
   UNFOLDEM program uses the UNFAREA control block, and the FOLDEM
   program uses the FLDAREA control block.  The formats of these
   are included here, as appropriately named members of this pds.

Well folks, that's how it works:

       Sam Golob        email:  sbgolob@attglobal.net
                                sbgolob@aol.com


