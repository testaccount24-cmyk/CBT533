UNFDRVR  CSECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  UNFDRVR - Driver program to test the UNFOLDEM program.           *
*                                                                   *
*    Purpose:  To test the ability of the UNFOLDEM program to       *
*    -------   move a block of data from an FB-80 file, starting    *
*              at an OFFSET location off the beginning of the       *
*              record, for a given number of bytes, and to move     *
*              that amount of data to a data buffer.  Then UNFDRVR  *
*              opens a tape file and writes the one block of data   *
*              to a tape.  Its main purpose is to debug the         *
*              UNFOLDEM program.                                    *
*                                                                   *
*    Method:   The UNFOLDEM program is set up to operate from a     *
*    ------    control block, called UNFAREA (the Unfold Area       *
*              Control Block) which is updated by both the driver   *
*              program and the UNFOLDEM program.  This is the       *
*              UNFAREA control block.  UNFAREA is passed back and   *
*              forth between the driver program and the UNFOLDEM    *
*              program, and is updated by both programs.            *
*                                                                   *
*     UNFAREA  DS    0F          UNFOLD AREA CONTROL BLOCK          *
*     *                          ------ ---- ------- -----          *
*     UNFSCARD DC    F'0'        Start address of 80-byte card      *
*     UNFECARD DC    F'0'        End address of 80-byte card        *
*     UNFOFFST DC    F'0'        OFFSET of data to be moved         *
*     UNFBYTES DC    F'0'        Number of bytes to be unfolded     *
*     UNFBYMVD DC    F'0'        Number of bytes that were moved    *
*     UNFBUFFR DC    F'0'        Current start address in buffer    *
*     UNFBSTRT DC    F'0'        Original start address of buffer   *
*     UNFINRCD DC    PL7'0'      Number of GETs for AWSIN records   *
*     UNFLENTH EQU   *-UNFAREA                                      *
*                                                                   *
*    JCL:      The following is sample JCL to run the UNFDRVR       *
*    ---       program:                                             *
*                                                                   *
*     //SBGOLOBT JOB ,'SAM GOLOB',CLASS=B,                          *
*     //    MSGCLASS=X,NOTIFY=&SYSUID                               *
*     //*                                                           *
*     //UNFTEST  EXEC PGM=UNFDRVR                                   *
*     //STEPLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD                     *
*     //AWSIN     DD  DISP=SHR,DSN=SBGOLOB.CBT468.FILE533(TESTDATA) *
*     //TAPOUT    DD  DISP=OLD,UNIT=562,VOL=SER=TSTDRV,             *
*     //          LABEL=(1,NL,EXPDT=98000)                          *
*     //*         LABEL=(1,BLP,EXPDT=98000)                         *
*     //SYSPRINT  DD  SYSOUT=*                                      *
*     //SYSIN     DD  *                                             *
*     OFFSET=42                                                     *
*     BYTESM=3000                                                   *
*     /*                                                            *
*                                                                   *
*              The TESTDATA data is "ruler data" which measures     *
*              the number of bytes in an obvious way, a small       *
*              segment of this data looks like the following:       *
*                                                                   *
*     ----+----1----+----2----+----3----+----4----+----5----+----6  *
*                                                                   *
*              but it fills the entire 80-byte record and wraps     *
*              around for several thousand bytes.  You can use      *
*              it to measure if the correct number of data bytes    *
*              have been moved, starting from the given offset      *
*              location.  The illustrated JCL will look at the      *
*              data in the current card, at an offset of +42 bytes  *
*              from the beginning of the card, and copy 3000 bytes  *
*              more out to a buffer, and write the buffer data out  *
*              to a tape file.  The UNFOLDEM program will do as     *
*              many GETs from the card file as needed, to fulfill   *
*              the 3000 byte requirement.                           *
*                                                                   *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         MACRO
*  ---------------------------------------------------------------  *
*    This macro is used to display hex values in a printed report.
*  ---------------------------------------------------------------  *
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R4,SAVER04
         STM   15,1,HEXSAVE
         LA    1,&FROM
         LA    0,&LEN
         LA    15,&TO
         BAL   4,HEX
         L     R4,SAVER04
         LM    15,1,HEXSAVE
         MEND
         SPACE
         YREGS
UNFDRVR  AMODE 24
UNFDRVR  RMODE 24
         USING *,R15
         B     EYECATCH
         DC    C'--- '            MAKE EYECATCHER VISIBLE
         DC    C'UNFDRVR  '
         DC    C' - '
SYSDAT   DC    C'&SYSDATE'
         DC    C'  ',C'&SYSTIME '
SAVEAREA DC    18F'0'
EYECATCH DS    0D                    ENSURE ALIGNMENT
         STM   R14,R12,12(R13)
         LR    R5,R1                 SAVE PARM POINTER
         LA    R1,SAVEAREA           NEW SAVE-AREA ADDR
         ST    R1,8(,R13)            FORWARD SAVE-AREA CHAIN PTR
         ST    R13,4(,R1)            BACKWARD SAVE-AREA CHAIN PTR
         LR    R13,R1                NEW SAVE AREA ADDRESS
         DROP  R15
* -----                              SET UP BASE REGISTERS
         USING UNFDRVR,R12,R11
         LR    R12,R15
         LA    R11,4095(,R12)
         LA    R11,1(,R11)
         LR    R1,R5                 RESTORE PARM POINTER
         ST    R1,SAVEPARM
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
UNFDRV   DS    0H
         OPEN  (SYSIN,(INPUT))
         OPEN  (AWSIN,(INPUT))
         OPEN  (SYSPRINT,(OUTPUT))
         OPEN  (TAPOUT,(OUTPUT))
         L     R3,=A(BUFFAREA)      POINT TO BEGINNING OF TAPE BUFFER
         ST    R3,SVBFAREA          SAVE BUFFAREA LOCATION
         ST    R3,UNFBUFFR          AND PASS IT TO CALLED PROGRAM
         ST    R3,UNFBSTRT          AND PASS IT TO CALLED PROGRAM
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
CARDREAD DS    0H              CHECK SYSIN FOR KEYWORDS AND PARMS        06356
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *    06357
*              Insert User Code Here for Keywords                        06358
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *    06359
         GET   SYSIN,CARDIN                                              06360
*                                                                        06361
* -- >>              <-- Intercept any keywords you want in SYSIN -->    06362
* -- >>              <--    before you start the table scan       -->    06363
*                                                                        06364
* ----------------------------------------------------------------- *    06365
         MVI   CARDWORK,X'40'           CLEAR CARD WORKAREA TO BLANKS    06366
         MVC   CARDWORK+1(79),CARDWORK                                   06367
         MVC   CARDWORK(80),CARDIN      MOVE CARD IMAGE TO WORKAREA      06368
         OC    CARDWORK(80),CARDBLNK    UPPERCASE                        06369
* ----------------------------------------------------------------- *    06370
*      CARDWORK now contains an uppercased version of CARDIN.            06371
* ----------------------------------------------------------------- *    06372
         CLC   =C'OFFSET=',CARDWORK     KEYWORD PRESENT IN THIS CARD?    06373
         BE    OFFSETMV          PROCESS THIS CARD FOR KEYWORD           06374
         CLC   =C'BYTESM=',CARDWORK     KEYWORD PRESENT IN THIS CARD?    06373
         BE    BYTESMVE          PROCESS THIS CARD FOR KEYWORD           06374
OFFSETMV DS    0H                                                        06423
         CLI   CARDIN+7,C' '     IS FIRST NUMBER VALUE BLANK?            06424
         BE    CARDREAD          YES. IGNORE ENTIRE CARD                 06425
         CLI   CARDIN+7,X'F0'    SMALLER THAN ZERO?                      06426
         BL    CARDREAD          YES. IGNORE.                            06427
         CLI   CARDIN+7,X'F9'    BIGGER THAN 9?                          06428
         BH    CARDREAD          YES. IGNORE.                            06429
         LA    R15,CARDIN+7      STARTING ADDRESS                        06431
         LR    R1,R15            LOAD R1 WITH THIS ADDRESS               06432
OFFSETNM DS    0H                                                        06433
         LA    R15,1(,R15)       BUMP TO NEXT CHARACTER                  06434
         C     R15,=A(CARDIN+71) END OF CARD?                            06435
         BH    OFFSTGNM          YES, GET NUMBER                         06436
         CLI   0(R15),C' '       BLANK HERE?                             06437
         BE    OFFSTGNM          YES, GET NUMBER                         06438
         B     OFFSETNM          NO. STEP UP ONE PLACE                   06439
OFFSTGNM DS    0H                                                        06440
         SR    R15,R1            HOW BIG IS THE NUMBER                   06441
         BCTR  R15,0             LOWER IT FOR EXECUTE                    06442
         EX    R15,PACKO         COPY THE NUMBER TO WORK AREA            06443
         CVB   R0,WORKO          CONVERT IT TO BINARY                    06446
         ST    R0,UNFOFFST       STORE THE VALUE FOR LATER USE           06447
         B     CARDREAD                                                  06453
BYTESMVE DS    0H                                                        06423
         CLI   CARDIN+7,C' '     IS FIRST NUMBER VALUE BLANK?            06424
         BE    CARDREAD          YES. IGNORE ENTIRE CARD                 06425
         CLI   CARDIN+7,X'F0'    SMALLER THAN ZERO?                      06426
         BL    CARDREAD          YES. IGNORE.                            06427
         CLI   CARDIN+7,X'F9'    BIGGER THAN 9?                          06428
         BH    CARDREAD          YES. IGNORE.                            06429
         LA    R15,CARDIN+7      STARTING ADDRESS                        06431
         LR    R1,R15            LOAD R1 WITH THIS ADDRESS               06432
BYTESMNM DS    0H                                                        06433
         LA    R15,1(,R15)       BUMP TO NEXT CHARACTER                  06434
         C     R15,=A(CARDIN+71) END OF CARD?                            06435
         BH    BYTESGNM          YES, GET NUMBER                         06436
         CLI   0(R15),C' '       BLANK HERE?                             06437
         BE    BYTESGNM          YES, GET NUMBER                         06438
         B     BYTESMNM          NO. STEP UP ONE PLACE                   06439
BYTESGNM DS    0H                                                        06440
         SR    R15,R1            HOW BIG IS THE NUMBER                   06441
         BCTR  R15,0             LOWER IT FOR EXECUTE                    06442
         EX    R15,PACKB         COPY THE NUMBER TO WORK AREA            06443
         CVB   R0,WORKB          CONVERT IT TO BINARY                    06446
         ST    R0,UNFBYTES       STORE THE VALUE FOR LATER USE           06447
         B     CARDREAD                                                  06453
PACKO    PACK  WORKO,0(0,1)          <<< EXECUTED >>>                    06758
PACKB    PACK  WORKB,0(0,1)          <<< EXECUTED >>>                    06758
WORKO    DC    D'0'                                                      04810
WORKB    DC    D'0'                                                      04810
* --------------------------------------------------------- *
SYSINEND DS    0H                FINISHED GETTING NUMBERS
         CLOSE SYSIN
* --------------------------------------------------------- *
*                                                           *
* --------------------------------------------------------- *
         GET   AWSIN,WORKCURR    GET ONE CARD IMAGE --
         AP    UNFINRCD,=P'1'    INCREMENT COUNT OF GETs
*                                   CALLED PROGRAM DOES THE REST....
         LA    R1,WORKCURR
         ST    R1,UNFSCARD
         LA    R1,80(,R1)
         ST    R1,UNFECARD
* --------------------------------------------------------- *
*   CALL THE UNFOLDEM PROGRAM                               *
* --------------------------------------------------------- *
         MVC   LINE+1(8),=C'BEFORE: '
         BAL   R9,UNFIMAGE
         LA    R1,UNFAREA
         L     R15,=V(UNFOLDEM)
         BALR  R14,R15
         MVC   LINE+1(8),=C'AFTER : '
         BAL   R9,UNFIMAGE
AWSINEND DS    0H
         MVC   LINE,LINE-1
*        MVC   LINE+1(8),=C'AFTCALL '
         L     R1,SVBFAREA
         HEX   LINE+1,66,0(R1)
         PUT   SYSPRINT,LINE
         MVC   LINE,LINE-1
* --------------------------------------------------------- *
*   WRITE THE TAPE                                          *
* --------------------------------------------------------- *
WRITBUFF DS    0H
         LA    R1,TAPOUT          R1=address of current DCB
         ST    R1,OUTDCBPT        Put it in IOB
         MVC   OUTCCW+6(2),UNFBYMVD+2   Move length of block
         MVC   OUTCCW+1(3),SVBFAREA+1   PRIME OUTPUT CCW
         MVI   OUTECB,X'00'       Initialize ECB
         EXCP  OUTIOB             Write out the buffer
         WAIT  ECB=OUTECB         Wait for write to complete
         CLI   OUTECB,X'7F'       Write completed normally?
         BNE   WRITBERR           No - error
         MVC   LINE,LINE-1
         MVC   LINE+1(8),=C'WRITTEN'
         L     R1,SVBFAREA
         HEX   LINE+10,61,0(R1)
         PUT   SYSPRINT,LINE
         MVC   LINE,LINE-1
COPYBACK DS    0H
         MVC   MAXRC,=F'0'
         B     RETURN
WRITBERR DS    0H
         MVC   MAXRC,=F'4'
         B     RETURN
* --------------------------------------------------------- *
RETURN   DS    0H                RETURN TO THE OPERATING SYSTEM
         CLOSE AWSIN
         CLOSE TAPOUT
         CLOSE SYSPRINT
         L     R13,4(,R13)
         MVC   16(4,R13),MAXRC      Load Maximum Return Code
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
* --------------------------------------------------------- *
* ---      S U B R O U T I N E S                        --- *
* --------------------------------------------------------- *
UNFIMAGE DS    0H
         HEX   LINE+10,4,UNFSCARD
         HEX   LINE+20,4,UNFECARD
         HEX   LINE+30,4,UNFOFFST
         HEX   LINE+40,4,UNFBYTES
         HEX   LINE+50,4,UNFBYMVD
         HEX   LINE+60,4,UNFBUFFR
         HEX   LINE+70,4,UNFBSTRT
         HEX   LINE+80,7,UNFINRCD
         PUT   SYSPRINT,LINE
         MVC   LINE,LINE-1
         BR    R9
* --------------------------------------------------------- *
* - - - - - - - -  D A T A   A R E A S  - - - - - - - - *
UNFAREA  DS    0F                   UNFOLD AREA CONTROL BLOCK
*                                   ------ ---- ------- -----
UNFSCARD DC    F'0'                 Start address of 80-byte card
UNFECARD DC    F'0'                 End address of 80-byte card
UNFOFFST DC    F'0'                 OFFSET of data to be moved
UNFBYTES DC    F'0'                 Number of bytes to be unfolded
UNFBYMVD DC    F'0'                 Number of bytes that were moved
UNFBUFFR DC    F'0'                 Current start address in buffer
UNFBSTRT DC    F'0'                 Saved start address of buffer
UNFINRCD DC    PL7'0'               Number of GETs for AWSIN records
UNFLENTH EQU   *-UNFAREA
WORKPREV DS    CL80                 Contiguous previous card image
WORKCURR DS    CL80                 Card image work area
*
FF       EQU   X'FF'
CARDBLNK DC    80C' '
CARDIN   DC    CL80' '
CARDWORK DC    CL80' '
ZEROCARD DC    80X'00'
SAVEBEGD DC    F'0'                 Save beg of buffer data address
SAVEENDD DC    F'0'                 Save end of buffer data address
SAVEBEGI DC    F'0'                 Save beg address of card input
SAVEBEGC DC    F'0'                 Save beg address of card
SAVEENDC DC    F'0'                 Save end address of card
SAVER8TR DC    F'0'                 Save floating Reg 8 which decreases
PARMPTR  DC    F'0'
SAVER10  DC    F'0'
SVBFAREA DC    F'0'
SAVEPARM DC    F'0'
MAXRC    DC    F'0'
         DC    C' '
LINE     DC    CL133' '
         DC    C' '
LINE2    DC    CL133' '
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R4                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEXSAVE  DS    3F                    Register save for HEX macro
SAVER04  DS    H                     Register save for HEX macro
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LTORG
* ----------------------------------------------------------------- *
*      CCWs and IOB for the EXCP operations.
* ----------------------------------------------------------------- *
OUTCCW   DC    X'01',AL3(SVBFAREA),X'2000',X'FFFF'
OUTECB   DC    F'0'
OUTIOB   DC    X'02000000'
         DC    A(OUTECB)
OUTCSW   DC    2F'0'
OUTCCWPT DC    A(OUTCCW)
OUTDCBPT DC    A(TAPOUT)
         DC    F'0'
         DC    X'00010000'
         DC    XL44'00'            PADDING
         ENTRY AWSIN
AWSIN    DCB   DDNAME=AWSIN,MACRF=GM,EODAD=AWSINEND,DSORG=PS,LRECL=80
TAPOUT   DCB   MACRF=(E),DDNAME=TAPOUT,DEVD=TA,DSORG=PS,RECFM=U
         ENTRY SYSPRINT
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA
SYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X 05677
               EODAD=SYSINEND                                            05678
BUFFAREA DS    CL65535            Buffer to hold tape blocks
         DS    CL800              Padding, so as not to overrun
*                                 somebody else's storage by mistake.
         END
