FLDDRVR  CSECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  FLDDRVR - Driver program to test the FOLDEM sub-program.         *
*                                                                   *
*    Purpose:  To test the ability of the FOLDEM program to fold    *
*    -------   a block of data from a buffer to an FB-80 file,      *
*              starting at a given location in the buffer, and      *
*              beginning the fold, to a given offset into the       *
*              FB-80 record, for a given number of bytes.  The      *
*              FLDDRVR program opens a tape file and folds a        *
*              certain number of bytes from it, into a given        *
*              location at a given offset into an FB-80 file.       *
*              PUTs are done, as necessary, into the FB-80 file,    *
*              until the number of bytes to be moved, is            *
*              satisfied.                                           *
*                                                                   *
*    Method:   The FOLDEM program is set up to operate from a       *
*    ------    control block, called FLDAREA (the FOLDEM Area       *
*              Control Block) which is updated by both the driver   *
*              program and the FOLDEM program.  FLDAREA is passed   *
*              back and forth between the driver program and the    *
*              FOLDEM program, and is updated by both programs.     *
*                                                                   *
*   FLDAREA  DS    0F           FOLDEM AREA CONTROL BLOCK           *
*   *                           ------ ---- ------- -----           *
*   FLDSCARD DC    F'0'         Start address of 80-byte card       *
*   FLDECARD DC    F'0'         End address of 80-byte card         *
*   FLDOFFST DC    F'0'         OFFSET of data in the card          *
*   FLDBYTES DC    F'0'         Number of bytes to be folded now    *
*   FLDBYTOT DC    F'0'         Batch total of bytes left to move   *
*   FLDBYMVD DC    F'0'         Number of bytes folded now          *
*   FLDBUFFR DC    F'0'         Current data start address          *
*   FLDBSTRT DC    F'0'         Original start data address         *
*   FLDOUTCT DC    PL7'0'       Number of PUTs for AWSOUT records   *
*   FLDLENTH EQU   *-FLDAREA                                        *
*                                                                   *
*    JCL:      The following is sample JCL to run the FLDDRVR       *
*    ---       program:                                             *
*                                                                   *
*   //SBGOLOBT JOB ,'SAM GOLOB',CLASS=B,                            *
*   //    MSGCLASS=X,NOTIFY=&SYSUID                                 *
*   //*                                                             *
*   //FLDTEST  EXEC PGM=FLDDRVR                                     *
*   //STEPLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD                       *
*   //AWSOUT    DD  DISP=SHR,DSN=SBGOLOB.CBT468.FILE533(TESTDATA)   *
*   //TAPIN     DD  DISP=OLD,UNIT=562,VOL=SER=TSTDRV,               *
*   //          LABEL=(1,NL,EXPDT=98000)                            *
*   //*         LABEL=(1,BLP,EXPDT=98000)                           *
*   //SYSPRINT  DD  SYSOUT=*                                        *
*   //SYSIN     DD  *                                               *
*   OFFSET=42                                                       *
*   BYTESM=3000                                                     *
*   /*                                                              *
*                                                                   *
*              The TESTDATA data is "ruler data" which measures     *
*              the number of bytes in an obvious way, a small       *
*              segment of this data looks like the following:       *
*                                                                   *
*     ----+----1----+----2----+----3----+----4----+----5----+----6  *
*                                                                   *
*              but it fills the entire 80-byte record and wraps     *
*              around for several thousand bytes.  You can use      *
*              it to measure if the correct number of data bytes    *
*              have been moved, starting from the given offset      *
*              location.  The illustrated JCL will look at the      *
*              data in the current card, at an offset of +42 bytes  *
*              from the beginning of the card, and copy 3000 bytes  *
*              more out to a buffer, and write the buffer data out  *
*              to a tape file.  The FOLDEM program will do as       *
*              many GETs from the card file as needed, to fulfill   *
*              the 3000 byte requirement.                           *
*                                                                   *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         MACRO
*  ---------------------------------------------------------------  *
*    This macro is used to display hex values in a printed report.
*  ---------------------------------------------------------------  *
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R4,SAVER04
         STM   15,1,HEXSAVE
         LA    1,&FROM
         LA    0,&LEN
         LA    15,&TO
         BAL   4,HEX
         L     R4,SAVER04
         LM    15,1,HEXSAVE
         MEND
         SPACE
         YREGS
FLDDRVR  AMODE 24
FLDDRVR  RMODE 24
         USING *,R15
         B     EYECATCH
         DC    C'--- '            MAKE EYECATCHER VISIBLE
         DC    C'FLDDRVR'
         DC    C' - '
SYSDAT   DC    C'&SYSDATE'
         DC    C'  ',C'&SYSTIME '
SAVEAREA DC    18F'0'
EYECATCH DS    0D                    ENSURE ALIGNMENT
         STM   R14,R12,12(R13)
         LR    R5,R1                 SAVE PARM POINTER
         LA    R1,SAVEAREA           NEW SAVE-AREA ADDR
         ST    R1,8(,R13)            FORWARD SAVE-AREA CHAIN PTR
         ST    R13,4(,R1)            BACKWARD SAVE-AREA CHAIN PTR
         LR    R13,R1                NEW SAVE AREA ADDRESS
         DROP  R15
* -----                              SET UP BASE REGISTERS
         USING FLDDRVR,R12,R11
         LR    R12,R15
         LA    R11,4095(,R12)
         LA    R11,1(,R11)
         LR    R1,R5                 RESTORE PARM POINTER
         ST    R1,SAVEPARM
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
FLDDRV   DS    0H
         OPEN  (SYSIN,(INPUT))
         OPEN  (AWSOUT,(OUTPUT))
         OPEN  (SYSPRINT,(OUTPUT))
         OPEN  (TAPIN,(INPUT))
         L     R3,=A(BUFFAREA)      POINT TO BEGINNING OF TAPE BUFFER
         ST    R3,SVBFAREA          SAVE BUFFAREA LOCATION
         ST    R3,FLDBUFFR          AND PASS IT TO CALLED PROGRAM
         ST    R3,FLDBSTRT          AND PASS IT TO CALLED PROGRAM
         ZAP   FLDOUTCT,=P'0'
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
CARDREAD DS    0H              CHECK SYSIN FOR KEYWORDS AND PARMS        06356
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *    06357
*              Insert User Code Here for Keywords                        06358
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *    06359
         GET   SYSIN,CARDIN                                              06360
*                                                                        06361
* -- >>              <-- Intercept any keywords you want in SYSIN -->    06362
* -- >>              <--    before you start the table scan       -->    06363
*                                                                        06364
* ----------------------------------------------------------------- *    06365
         MVI   CARDWORK,X'40'           CLEAR CARD WORKAREA TO BLANKS    06366
         MVC   CARDWORK+1(79),CARDWORK                                   06367
         MVC   CARDWORK(80),CARDIN      MOVE CARD IMAGE TO WORKAREA      06368
         OC    CARDWORK(80),CARDBLNK    UPPERCASE IT                     06369
* ----------------------------------------------------------------- *    06370
*      CARDWORK now contains an uppercased version of CARDIN.            06371
* ----------------------------------------------------------------- *    06372
         CLC   =C'OFFSET=',CARDWORK     KEYWORD PRESENT IN THIS CARD?    06373
         BE    OFFSETMV          PROCESS THIS CARD FOR KEYWORD           06374
         CLC   =C'BYTESM=',CARDWORK     KEYWORD PRESENT IN THIS CARD?    06373
         BE    BYTESMVE          PROCESS THIS CARD FOR KEYWORD           06374
OFFSETMV DS    0H                                                        06423
         CLI   CARDIN+7,C' '     IS FIRST NUMBER VALUE BLANK?            06424
         BE    CARDREAD          YES. IGNORE ENTIRE CARD                 06425
         CLI   CARDIN+7,X'F0'    SMALLER THAN ZERO?                      06426
         BL    CARDREAD          YES. IGNORE.                            06427
         CLI   CARDIN+7,X'F9'    BIGGER THAN 9?                          06428
         BH    CARDREAD          YES. IGNORE.                            06429
         LA    R15,CARDIN+7      STARTING ADDRESS                        06431
         LR    R1,R15            LOAD R1 WITH THIS ADDRESS               06432
OFFSETNM DS    0H                                                        06433
         LA    R15,1(,R15)       BUMP TO NEXT CHARACTER                  06434
         C     R15,=A(CARDIN+71) END OF CARD?                            06435
         BH    OFFSTGNM          YES, GET NUMBER                         06436
         CLI   0(R15),C' '       BLANK HERE?                             06437
         BE    OFFSTGNM          YES, GET NUMBER                         06438
         B     OFFSETNM          NO. STEP UP ONE PLACE                   06439
OFFSTGNM DS    0H                                                        06440
         SR    R15,R1            HOW BIG IS THE NUMBER                   06441
         BCTR  R15,0             LOWER IT FOR EXECUTE                    06442
         EX    R15,PACKO         COPY THE NUMBER TO WORK AREA            06443
         CVB   R0,WORKO          CONVERT IT TO BINARY                    06446
         ST    R0,FLDOFFST       STORE THE VALUE FOR LATER USE           06447
         B     CARDREAD                                                  06453
BYTESMVE DS    0H                                                        06423
         CLI   CARDIN+7,C' '     IS FIRST NUMBER VALUE BLANK?            06424
         BE    CARDREAD          YES. IGNORE ENTIRE CARD                 06425
         CLI   CARDIN+7,X'F0'    SMALLER THAN ZERO?                      06426
         BL    CARDREAD          YES. IGNORE.                            06427
         CLI   CARDIN+7,X'F9'    BIGGER THAN 9?                          06428
         BH    CARDREAD          YES. IGNORE.                            06429
         LA    R15,CARDIN+7      STARTING ADDRESS                        06431
         LR    R1,R15            LOAD R1 WITH THIS ADDRESS               06432
BYTESMNM DS    0H                                                        06433
         LA    R15,1(,R15)       BUMP TO NEXT CHARACTER                  06434
         C     R15,=A(CARDIN+71) END OF CARD?                            06435
         BH    BYTESGNM          YES, GET NUMBER                         06436
         CLI   0(R15),C' '       BLANK HERE?                             06437
         BE    BYTESGNM          YES, GET NUMBER                         06438
         B     BYTESMNM          NO. STEP UP ONE PLACE                   06439
BYTESGNM DS    0H                                                        06440
         SR    R15,R1            HOW BIG IS THE NUMBER                   06441
         BCTR  R15,0             LOWER IT FOR EXECUTE                    06442
         EX    R15,PACKB         COPY THE NUMBER TO WORK AREA            06443
         CVB   R0,WORKB          CONVERT IT TO BINARY                    06446
         ST    R0,FLDBYTES       STORE THE VALUE FOR LATER USE           06447
         ST    R0,FLDBYTOT       STORE THE VALUE FOR LATER USE           06447
         B     CARDREAD                                                  06453
PACKO    PACK  WORKO,0(0,1)          <<< EXECUTED >>>                    06758
PACKB    PACK  WORKB,0(0,1)          <<< EXECUTED >>>                    06758
WORKO    DC    D'0'                                                      04810
WORKB    DC    D'0'                                                      04810
* --------------------------------------------------------- *
SYSINEND DS    0H                FINISHED GETTING NUMBERS
         CLOSE SYSIN
* --------------------------------------------------------- *
*   GET A TAPE RECORD                                       *
* --------------------------------------------------------- *
READBUFF DS    0H
         LA    R1,TAPIN           R1=address of current DCB
         ST    R1,INDCBPT         Put it in IOB
         MVC   INCCW+6(2),=X'FFFF'      Move length of block - max
         MVC   INCCW+1(3),SVBFAREA+1    PRIME INPUT CCW
         MVI   INECB,X'00'        Initialize ECB
* - - - >
         EXCP  INIOB              Read a block                           02401
         WAIT  ECB=INECB          Wait for READ to complete              02402
         TM    INCSW+4,X'01'      Was a Tape Mark read?                  02403
         BO    READIN1            Yes, handle it.                        02404
         CLI   INECB,X'7F'        Did the READ complete normally?        02405
         BNE   READBERR           No. Report the error.                  02406
*        LH    R2,INCCW+6         Calculate the READ length              02408
         XC    FULLWORK,FULLWORK     Clear area completely.              02409
         MVC   HALFWORK(2),INCCW+6   Original READ length 65535.         02410
         L     R2,FULLWORK        Load R2 with fullword quantity.        02411
*        LH    R3,INCSW+6         Get the residual byte count.           02412
         XC    FULLWORK,FULLWORK     Clear area completely.              02409
         MVC   HALFWORK(2),INCSW+6   Load lower halfword with count.     02413
         L     R3,FULLWORK        Load R3 with fullword quantity.        02414
         SR    R2,R3              Get actual length read.                02415
         ST    R2,FLDBYTOT        Save quantity in FLDAREA field.        02416
* - - - >
         MVC   LINE,LINE-1
         MVC   LINE+1(8),=C'READ   '
         L     R1,SVBFAREA        Diagnostic printout of beg of buffer
         HEX   LINE+10,61,0(R1)
         PUT   SYSPRINT,LINE
         MVC   LINE,LINE-1
COPYBACK DS    0H
         MVC   MAXRC,=F'0'
         B     MAKEFB80
READBERR DS    0H
         MVC   MAXRC,=F'4'
         B     RETURN
* --------------------------------------------------------- *
MAKEFB80 DS    0H
* --------------------------------------------------------- *
*   CALL THE FOLDEM PROGRAM                                 *
* --------------------------------------------------------- *
         MVC   FB80IN(80),ZEROCARD   Initialize FB-80 output area to 0s
         LA    R1,FB80IN             Tell FLDAREA its beginning
         ST    R1,FLDSCARD
         A     R1,=F'80'             Add 80 bytes
         ST    R1,FLDECARD           Tell FLDAREA its end location
         L     R1,SVBFAREA           Get loc of beginning of buffer
         ST    R1,FLDBUFFR           Fill both FLDAREA fields
         ST    R1,FLDBSTRT
         MVC   LINE+1(8),=C'BEFORE: '   Diagnostic picture before call
         BAL   R9,FLDIMAGE
         LA    R1,FLDAREA
         L     R15,=V(FOLDEM)
         BALR  R14,R15
*                                       Copy back FLDAREA from FOLDEM
         ST    R1,NEWFLDA
         MVC   FLDAREA(FLDLENTH),0(R1)  Move modified FLDAREA to pgm
         MVC   LINE+1(8),=C'AFTER : '   Diagnostic picture after call
         BAL   R9,FLDIMAGE
AWSOUEND DS    0H
         MVC   LINE,LINE-1
         L     R1,SVBFAREA
         HEX   LINE+1,66,0(R1)
         PUT   SYSPRINT,LINE
         MVC   LINE,LINE-1
         PUT   AWSOUT,FB80IN
         AP    FLDOUTCT,=P'1'           Count of AWSOUT records written
         MVC   LINE+1(8),=C'ENDPGM: '   Diagnostic picture at end
         BAL   R9,FLDIMAGE
* --------------------------------------------------------- *
READIN1  DS    0H
* --------------------------------------------------------- *
RETURN   DS    0H                RETURN TO THE OPERATING SYSTEM
         CLOSE AWSOUT
         CLOSE TAPIN
         CLOSE SYSPRINT
         L     R13,4(,R13)
         MVC   16(4,R13),MAXRC      Load Maximum Return Code
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
* --------------------------------------------------------- *
* ---      S U B R O U T I N E S                        --- *
* --------------------------------------------------------- *
FLDIMAGE DS    0H         Diagnostic Data - State of FLDAREA currently
*
         HEX   LINE+10,4,FLDSCARD
         HEX   LINE+20,4,FLDECARD
         HEX   LINE+30,4,FLDOFFST
         HEX   LINE+40,4,FLDBYTES
         HEX   LINE+50,4,FLDBYTOT
         HEX   LINE+60,4,FLDBYMVD
         HEX   LINE+70,4,FLDBUFFR
         HEX   LINE+80,4,FLDBSTRT
         HEX   LINE+90,7,FLDOUTCT
         PUT   SYSPRINT,LINE
         MVC   LINE,LINE-1
         BR    R9
* --------------------------------------------------------- *
         LTORG
* - - - - - - - -  D A T A   A R E A S  - - - - - - - - *
FLDAREA  DS    0F           FOLDEM AREA CONTROL BLOCK
*                           ------ ---- ------- -----
FLDSCARD DC    F'0'         Start address of 80-byte card
FLDECARD DC    F'0'         End address of 80-byte card
FLDOFFST DC    F'0'         OFFSET of data in the card
FLDBYTES DC    F'0'         Number of bytes to be folded now
FLDBYTOT DC    F'0'         Batch total of bytes left to move
FLDBYMVD DC    F'0'         Number of bytes folded now
FLDBUFFR DC    F'0'         Current data start address
FLDBSTRT DC    F'0'         Original start data address
FLDOUTCT DC    PL7'0'       Number of PUTs for AWSOUT records
FLDREADF DC    X'00'        This run is "READ ONLY"  ?
*              X'01'        Yes, read only.
FLDLENTH EQU   *-FLDAREA
* ------
FB80IN   DS    CL80                 Card image INPUT area
*
FF       EQU   X'FF'
CARDBLNK DC    80C' '
CARDIN   DC    CL80' '
CARDWORK DC    CL80' '
ZEROCARD DC    80X'00'
SAVEBEGD DC    F'0'                 Save beg of buffer data address
SAVEENDD DC    F'0'                 Save end of buffer data address
SAVEBEGI DC    F'0'                 Save beg address of card input
SAVEBEGC DC    F'0'                 Save beg address of card
SAVEENDC DC    F'0'                 Save end address of card
SAVER8TR DC    F'0'                 Save floating Reg 8 which decreases
PARMPTR  DC    F'0'
SAVER10  DC    F'0'
SVBFAREA DC    F'0'
SAVEPARM DC    F'0'
NEWFLDA  DC    F'0'
FULLWORK DS    0F                                                        05265
         DC    H'0'                                                      05266
HALFWORK DC    H'0'                HALFWORD WORK AREA                    05267
         DC    2F'0'               FILLER                                05268
MAXRC    DC    F'0'
         DC    C' '
LINE     DC    CL133' '
         DC    C' '
LINE2    DC    CL133' '
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R4                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEXSAVE  DS    3F                    Register save for HEX macro
SAVER04  DS    H                     Register save for HEX macro
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LTORG
* ----------------------------------------------------------------- *
*      CCWs and IOB for the EXCP operations.
* ----------------------------------------------------------------- *
INCCW    DC    X'02',AL3(SVBFAREA),X'2000',X'FFFF'
INECB    DC    F'0'
INIOB    DC    X'02000000'
         DC    A(INECB)
INCSW    DC    2F'0'
INCCWPT  DC    A(INCCW)
INDCBPT  DC    A(TAPIN)
         DC    F'0'
         DC    X'00010000'
         DC    XL44'00'            PADDING
         ENTRY AWSOUT
AWSOUT   DCB   DDNAME=AWSOUT,MACRF=PM,EODAD=AWSOUEND,DSORG=PS,LRECL=80
TAPIN    DCB   MACRF=(E),DDNAME=TAPIN,DEVD=TA,DSORG=PS,RECFM=U
         ENTRY SYSPRINT
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA
SYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X 05677
               EODAD=SYSINEND                                            05678
BUFFAREA DS    CL65535            Buffer to hold tape blocks
         DS    CL800              Padding, so as not to overrun
*                                 somebody else's storage by mistake.
         END
